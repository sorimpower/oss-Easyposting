<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><description>about</description><title>Lifehacks for getting things done</title><generator>Tumblr (3.0; @likejazz)</generator><link>http://likejazz.com/</link><item><title>"라루는 “알렉스의 어머니가 알렉스에게 말할 권리가 있다는 것을 가르치고 있다”고 적고 있다. 자기보다 나이가 많고 권위가 있어 보이는 사람과 한곳에 있을지라도..."</title><description>“&lt;p&gt;라루는 “알렉스의 어머니가 알렉스에게 말할 권리가 있다는 것을 가르치고 있다”고 적고 있다. 자기보다 나이가 많고 권위가 있어 보이는 사람과 한곳에 있을지라도 자기 생각을 표현하는 것이 정당한 일임을 가르치고 있는 것이다.&lt;/p&gt;

&lt;p&gt;두 사람은 40대 초반의 온화한 의사를 만났는데, 그는 알렉스에게 알렉스의 키가 상위 5퍼센트에 속한다고 말했다. 그러자 알렉스가 끼어들었다.&lt;/p&gt;

&lt;p&gt;"그게 무슨 말이죠?"&lt;br/&gt;
“그건 네가 또래의 열 살짜리 100명 중에 95명보다 키가 크다는 뜻이야.”&lt;br/&gt;
“저는 아직 열 살이 아닌데요.”&lt;br/&gt;
“음, 그래프에서는 열 살이야. 너는 9년 10개월인데 그래프를 그릴때는 좀더 가까운 쪽의 나이를 쓰게 되어 있거든.”&lt;/p&gt;

&lt;p&gt;알렉스가 얼마나 서슴없이 의사의 말에 끼어드는지 보라. 이것이 ‘권한’이다. 알렉스의 어머니는 아들이 권위 있는 위치에 앉은 사람에게 자기주장을 할 수 있기를 바라기 때문에 사소한 무례는 용납하고 있다.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;라루는 “물어보기 위해 준비한 내용을 기억해내는 동안 알렉스는 의사의 관심을 얻어냈고 그것을 자신이 원하는 주제로 끌고 갔다”고 적고 있다. 이 과정에서 알렉스는 어른들에게서 자신에게로 힘의 균형을 이동시키는데 성공했으며 그 전환은 대체로 부드럽게 이뤄졌다.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;자신이 놓인 상황에 대응하는 방식을 익히는 것은 매우 중요하다. 그것은 유전되는 것이 아니다. 그 능력은 인종에 따라 나뉘지도 않는다. 사실 알렉스는 흑인이고 케이티는 백인이다. 이것은 문화적인 요소이다. 어린 시절부터 알렉스의 부모가 교양 있는 방식으로 점잖게 설득하는 방법, 거절하는 방법, 격려하는 방법 등을 가르치고 진료를 받는 경우처럼 기회가 있을 때마다 예행연습까지 시켰기 때문에 알렉스가 그런 기술을 습득했을 뿐이다.&lt;/p&gt;”&lt;br/&gt;&lt;br/&gt; - &lt;em&gt;&lt;아웃라이어&gt;, 말콤 글래드웰&lt;br/&gt;
실용 지능(practical intelligence), 사회가 사랑하는 인간의 요건&lt;/em&gt;</description><link>http://likejazz.com/post/98389340605</link><guid>http://likejazz.com/post/98389340605</guid><pubDate>Thu, 25 Sep 2014 23:34:35 +0900</pubDate></item><item><title>한메일 안읽은메일 알리미 for Mac</title><description>&lt;p&gt;한메일 &amp;#8216;안읽은 메일&amp;#8217; 수를 체크하는 크롬 익스텐션을 찾다가 유일한 익스텐션인 &lt;a href="https://github.com/ikhoon/daum-mail-chekcer"&gt;Daum Mail Checker&lt;/a&gt; 조차 현재 동작하지 않는다는걸 깨달았다. 왜 안될까 싶어 fork 해서 봤더니 기존 login 페이지에 평타로 ID/PW를 날리는데, 보안 규정상 현재는 더 이상 동작하지 않아서 였다.&lt;/p&gt;

&lt;p&gt;따로 오픈 API를 제공하지 않고 결국 IMAP으로 확인할 수 밖에 없는데 마찬가지로 보안상 SSL만 지원한다. 크롬 익스텐션으로는 XHR 밖에 쓸 수 없고 IMAP 접속을 위해서는 chrome.socket을 써야 하는데 이 역시도 아직 TLS가 구현되어 있지 않다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hiddentao/browsermail"&gt;TLS와 IMAP을 구현한 프로젝트&lt;/a&gt;가 있긴한데 내가 필요한건 메일 클라이언트가 아니라 단순히 &amp;#8216;안읽은 메일&amp;#8217; 수 였기 때문에 좀 더 단순한 형태가 필요했고 bash로 IMAP automate를 구현하고 terminal-notifier로 맥 알리미로 보여주는 형태로 직접 구현했다.&lt;/p&gt;

&lt;h1&gt;실행화면&lt;/h1&gt;

&lt;p&gt;&lt;img src="https://31.media.tumblr.com/ee04a857fb1ba3610b7da6f4a3a5da0d/tumblr_inline_nayjvk6Ah51qzgoac.png" alt=""/&gt;&lt;/p&gt;

&lt;h1&gt;요구사항&lt;/h1&gt;

&lt;ul&gt;&lt;li&gt;gnutls&lt;br/&gt;&lt;code&gt;brew install gnutls&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;terminal-notifier&lt;br/&gt;&lt;code&gt;sudo gem install terminal-notifier&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;스크립트&lt;/h1&gt;

&lt;p&gt;아래 bash 스크립트를 적절한 위치에 두고 crontab에 등록하면 된다.&lt;/p&gt;

&lt;script src="https://gist.github.com/likejazz/a64356132f53b05213ca.js"&gt;&lt;/script&gt;&lt;p&gt;내 경우 1분에 한 번씩 동작하도록 다음과 같이 설정했다.&lt;br/&gt;&lt;code&gt;* * * * * ~/bin/hanmail.sh&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;기타&lt;/h1&gt;

&lt;p&gt;서버의 인증 오류가 잦은데 그럴때는 로컬에 메일이 쌓인다.&lt;br/&gt;&lt;code&gt;vi /var/mail/USERNAME&lt;/code&gt; 으로 확인할 수 있다.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="http://dev.likejazz.com/post/95899459896/for-mac"&gt;http://dev.likejazz.com/post/95899459896/for-mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://likejazz.com/post/98295459920</link><guid>http://likejazz.com/post/98295459920</guid><pubDate>Wed, 24 Sep 2014 17:26:39 +0900</pubDate></item><item><title>30년 동안 돌보던 파킨슨병 아내를 살해했다</title><description>&lt;a href="http://www.huffingtonpost.kr/2014/09/23/story_n_5865466.html"&gt;30년 동안 돌보던 파킨슨병 아내를 살해했다&lt;/a&gt;: &lt;p&gt;'노노부양'의 비극. 무엇보다 죽을때까지 아프지 않고 건강하게 사는게 가장 중요하다. 나아가 내 작은 바램이 있다면 죽을때까지 일 할 수 있는 삶이다. 일찍 은퇴해서 여행이나 다니며 하릴없이 죽을 날만 기다리는 삶은 전혀 부럽지 않다. 그러기 위해선 무엇보다 건강해야 하고 꾸준히 운동해야 한다. 하루종일 일만 하겠다는 얘기가 아니라 6시간 일, 10시간 놀고, 8시간 잠의 균형있는 패턴으로 죽기 직전까지 일 하는게 소박한 바램이다.&lt;/p&gt;

&lt;p&gt;물론 6시간이란 시간은 절대적인 수치가 아니다. 필요할땐 하루 24시간도 일 할 수 있고 반대로 쉬고 싶을땐 하루종일 일 안하고 쉴 수도 있다. 지식 산업에서 일하는 시간을 정확히 가르는건 무의미하다. 오히려 얼마나 집중해서 일하는지가 훨씬 더 중요하다. 집중은 반드시 사무실에서만 하는건 아니다. 집에서도 띄엄띄엄 집중해서 일할 수 있다. 사무실과 집의 구분 없이 모든 집중 업무 시간의 총합은 평균적으로 하루 6시간 정도면 충분하다.&lt;/p&gt;</description><link>http://likejazz.com/post/98287811150</link><guid>http://likejazz.com/post/98287811150</guid><pubDate>Wed, 24 Sep 2014 14:08:00 +0900</pubDate></item><item><title>리눅스와 GNU 프로젝트</title><description>&lt;a href="http://www.gnu.org/gnu/linux-and-gnu.html"&gt;리눅스와 GNU 프로젝트&lt;/a&gt;: &lt;blockquote&gt;
  &lt;p&gt;우리가 사용하고 있는 리눅스 그 자체는 커널을 의미합니다. 커널이 운영체제의 핵심 부분이라는 것은 틀림없는 사실이지만, 그것만으로 운영체제의 역할을 수행할 수 있는 것은 아닙니다. 현재 사용되고 있는 GNU 시스템은 리눅스를 기반으로 한 운영체제이며 이는 리눅스를 커널로 채택한 일종의 변형된 종류의 GNU 시스템이라고 할 수 있습니다.&lt;/p&gt;
  
  &lt;p&gt;….&lt;/p&gt;
  
  &lt;p&gt;유닉스 형태의 자유 운영체제를 개발하기 위한 또하나의 프로젝트로 UC 버클리 대학의 BSD가 있습니다. BSD의 개발자들은 GNU 프로젝트와 그 개발자들에게 많은 영향을 받았지만, 실제적인 작업에 있어서는 GNU 시스템과 중복되는 부분이 없다고 볼 수 있습니다. 물론, 두 시스템 모두 서로의 프로그램을 조금씩 차용하고 있기는 하지만 전체적으로 볼 때 이들은 독립적으로 발전하고 있다고 할 수 있기 때문에 오늘날의 자유 운영체제는 크게 GNU 시스템과 BSD 시스템 두개의 영역으로 구분할 수 있습니다.&lt;/p&gt;
  
  &lt;p&gt;…&lt;/p&gt;
  
  &lt;p&gt;현재, 우리는 대부분의 작업에 리눅스 기반의 GNU 시스템을 이용하고 있으며 이 시스템의 사용을 많은 사람들에게 권장하고 있습니다. 그러나 리눅스를 커널과 운영체제의 이름으로 혼동해서 사용하는 지금의 경향에서 벗어나서 커널을 의미할 때는 리눅스라는 이름을, 운영체제 전체를 지칭할 때는 GNU라는 명칭을 사용해 줄 것을 간곡하게 당부하고 싶습니다.&lt;/p&gt;
&lt;/blockquote&gt;</description><link>http://likejazz.com/post/96615852530</link><guid>http://likejazz.com/post/96615852530</guid><pubDate>Thu, 04 Sep 2014 21:39:00 +0900</pubDate></item><item><title>우리나라에서는 왜 천재가 나오지 못하는가?</title><description>&lt;a href="http://www.huffingtonpost.kr/joonkoo-lee/story_b_5727414.html"&gt;우리나라에서는 왜 천재가 나오지 못하는가?&lt;/a&gt;: &lt;p&gt;요즘 이준구 교수님의 컬럼이 너무 좋다.&lt;/p&gt;

&lt;p&gt;고교시절 아침 7시까지 등교해 밤 11시 하교, 독서실에서 새벽 2시까지 공부하고 셔틀버스를 타고 집으로 돌아왔던, 살인적인 스케쥴을 소화했던 한 사람으로서 교수님의 지적이 무척 와닿는다. 매일 새벽 2시에 들어왔다가 7시에 나가는데 제대로 쉴 수 있을리 없다. 항상 오전엔 꾸벅꾸벅 졸아대며 결국엔 늦게 등교하는 것과 다를 바 없게 된다.&lt;/p&gt;

&lt;p&gt;누군가 그렇게 하면 안된다고, 저녁에 일찍 들어가서 자던지 아침에 푹 쉬고 늦게 나오던지 제대로된 방법만 일러줬어도 그때처럼 바보 같은 짓을 수 년간 반복하진 않았을텐데.&lt;/p&gt;

&lt;p&gt;우리세대 부모님들은 교육열만 충만했지 어떤게 제대로 된 교육인지 전혀 알지 못했다. 물론 지금도 그런 바보같은 일이 반복되고 있지만 적어도 나는, 내 아이들에겐 반드시 제대로 된 교육을 가르치고 싶다.&lt;/p&gt;</description><link>http://likejazz.com/post/96494568910</link><guid>http://likejazz.com/post/96494568910</guid><pubDate>Wed, 03 Sep 2014 09:15:21 +0900</pubDate></item><item><title>한메일 안읽은메일 알리미 for Mac</title><description>&lt;a href="http://dev.likejazz.com/post/95899459896/for-mac"&gt;한메일 안읽은메일 알리미 for Mac&lt;/a&gt;: &lt;p&gt;데스크탑 메일 알리미는 거의 없었고 그나마 있는 것도 대부분 지메일 전용이었다. 그래서 업무 메일을 실시간으로 확인하기 위해 ‘한메일 안읽은메일 알리미’를 직접 만들었다.&lt;/p&gt;</description><link>http://likejazz.com/post/95987627445</link><guid>http://likejazz.com/post/95987627445</guid><pubDate>Thu, 28 Aug 2014 18:11:31 +0900</pubDate></item><item><title>K-Ranker</title><description>&lt;p&gt;&lt;a href="http://dev.likejazz.com/post/94529154236/curve-fitting"&gt;지난 번 공개한 Curve Fitting 알고리즘&lt;/a&gt;을 실제 코드로 구현했다. 언어는 Java를 사용했다.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/likejazz/k-ranker"&gt;https://github.com/likejazz/k-ranker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;이번에는 시간이 부족해서 문서나 주석을 영어로 작성하지 못하고 사내에서 한글로 작성했던 그대로 올렸다. 사실 글로벌한 개발 생태계를 위해선 당연히 영어로 모든걸 작성하는게 옳지만 사내에서는 영어로 적다보면 한글로만 표현 가능한 독특한 명칭들 때문에 난해해지는 경우가 잦다. 예를 들어 &amp;#8220;매출&amp;#8221; 같은 고유 명칭을 MAECHUL이라고 할 수 없고 Sales라고 하기엔 간극이 너무 크다. 가능한 영어를 써야겠지만 난해함을 줄이기 위한 한영 혼용을 권장한다. 아울러 오픈소스로 공개할땐 당연히 모두 영어로 변환해야겠지만 시간이 많이 필요한 한계가 있어 지금처럼 한글을 그대로 내보낼땐 다소 아쉽다.&lt;/p&gt;

&lt;p&gt;한글을 너무너무 사랑하지만 세상은 영어를 중심으로 돌아가니 참 풀기 어려운 문제다.&lt;/p&gt;</description><link>http://likejazz.com/post/95334809115</link><guid>http://likejazz.com/post/95334809115</guid><pubDate>Thu, 21 Aug 2014 11:29:00 +0900</pubDate></item><item><title>
Dennis Hong 교수님의 강연 정말 대단했고 재밌었습니다.
요 근래 경험한 최고의 강연이었습니다. 훌륭한 인사이트 많이 얻어갑니다.</title><description>&lt;p&gt;&lt;img src="https://31.media.tumblr.com/f4c28c24bd9f22df3ef91caaaba2e2e7/tumblr_inline_n9x0n680cI1qzgoac.jpg" alt=""/&gt;&lt;br/&gt;
Dennis Hong 교수님의 강연 정말 대단했고 재밌었습니다.&lt;br/&gt;
요 근래 경험한 최고의 강연이었습니다. 훌륭한 인사이트 많이 얻어갑니다.&lt;/p&gt;</description><link>http://likejazz.com/post/94027149565</link><guid>http://likejazz.com/post/94027149565</guid><pubDate>Thu, 07 Aug 2014 11:38:25 +0900</pubDate></item><item><title>피보나치 수열의 마법</title><description>&lt;p&gt;&lt;img src="https://31.media.tumblr.com/51ee3ae1bb18e40d6eec1b064725ff89/tumblr_inline_n9j9dqlF9X1qzgoac.png" alt=""/&gt;&lt;br/&gt;&lt;a href="http://youtu.be/-KlmJPw86-8"&gt;피보나치수열의 마법 / YTN 사이언스방송&lt;/a&gt;을 보다가, 중간에 아서 벤자민 교수의 얘기가 나온다. 아니나 다를까 찾아보니 &lt;a href="http://www.ted.com/talks/arthur_benjamin_the_magic_of_fibonacci_numbers"&gt;작년에 TED에서 했던 강연&lt;/a&gt;의 일부다. 그는 수학을 &amp;#8216;inspiration&amp;#8217; 영감을 얻는 아름다움의 관점에서 접근했고 피보나치 수열이 얼마나 아름다운지를 소개했다. 단 5분의 발표였지만 내게 강한 인상을 남겼고 한 동안 그 아름다움에서 헤어나오지 못했다.&lt;/p&gt;</description><link>http://likejazz.com/post/93358301560</link><guid>http://likejazz.com/post/93358301560</guid><pubDate>Thu, 31 Jul 2014 10:10:08 +0900</pubDate></item><item><title>좋은 개발자에 대한 생각</title><description>&lt;p&gt;취업시즌이 되면 나오는 얘기가 있다. 개발자는 처우가 안좋다느니 3D 업종이니 하는 얘기들. 그러면서 공대 기피현상이 사회문제로 등장한다. 하지만 개발자는 IT 기업에서 최고의 대우를 받는 직종이고 타 직군 대비 평균 임금도 높다. 게다가 좋아하는 일을 자유롭게 할 수 있는 만큼 이걸 3D라고 표현하는건 지나친 자조에 가깝다.&lt;/p&gt;

&lt;p&gt;지속적으로 재미없고 힘든 일이라는 생각이 든다면 하루라도 빨리 다른 직업을 찾아보는게 좋다. 매일 야근을 해야할만큼 업무가 과중하다면 먼저 본인이 시간 관리를 효율적으로 하는지 되돌아볼 필요가 있다. 정작 주간에는 엉뚱한 일로 시간을 흘려버리는건 아닌지. 그럼에도 불구하고 하루종일 밥먹을 시간조차 부족할만큼 격무에 시달린다면 두 가지다. 정말로 일이 많거나 개발자로서 자질이 부족한 경우다. 전자는 안타까운 경우다. 하지만 더 안타까운 경우는 오히려 후자다. 아무리 처우가 좋다한들 소질이 없으면 빨리 다른 직업을 찾아보는게 맞다. 창의성이 부족한, 그저 시키는 일만 하는 친구들은 더 이상 성장할 수 없다. 본인도, 주변에서도 모두가 힘들어질 뿐이다.&lt;/p&gt;

&lt;p&gt;나는 ‘자폐증’에 가까울 증도로 geeky한 친구를 좋아한다. 그런 친구들은 기술에 대해 집착에 가까울만큼 깊이있게 파고들며 문제를 low-level에서 해결하는 능력이 높다. 끈기가 부족하다는 단점이 있지만 ‘동기 부여’만 된다면 놀라운 생산성을 발휘한다. 좋은 매니저의 역할은 ‘동기 부여’를 잘 하는 것 뿐이다. 가치와 성취감을 부여해 줄 수 있다면 다른 사람이 몇 개월은 해야할 일을 단 몇 주만에 해결하기도 한다. 물론 팀 구성원은 다양한 인물들로 구성된 ‘조화’가 중요하고 ‘끈기’ 또한 ‘창의성’ 못지 않게 중요하다. 하지만 개발 방향을 제시하는 핵심적인 역할은 이런 geeky한 친구들의 몫임은 분명하다.&lt;/p&gt;

&lt;p&gt;좋은 개발자는 항상 모자란다. 이미 &lt;a href="http://media.daum.net/editorial/column/newsview?newsid=20140414190008477"&gt;글로벌 인재 전쟁은 시작&lt;/a&gt;됐다. 본인이 개발에 소질 있다는 생각이 든다면 꾸준히 정진하여 좋은 개발자가 되어라. 창의적인 개발자가 되어야 한다. 시키는 일만 잘 하는 개발자는 언젠가는 기계로 대체되겠지만 ‘창의적’인 개발자는 절대 기계가 대체할 수 없다. 오히려 좋은 개발자를 찾기 위한 수요는 앞으로 더욱 늘어날 것이다.&lt;/p&gt;</description><link>http://likejazz.com/post/93164295865</link><guid>http://likejazz.com/post/93164295865</guid><pubDate>Tue, 29 Jul 2014 10:23:00 +0900</pubDate></item><item><title>토마 피케티《21세기 자본론》서평</title><description>&lt;a href="http://jkl123.com/sub3_1.htm?table=my1&amp;st=view&amp;page=1&amp;id=166&amp;limit=&amp;keykind=&amp;keyword=&amp;bo_class="&gt;토마 피케티《21세기 자본론》서평&lt;/a&gt;: &lt;p&gt;뉴욕타임즈 베스트 셀러이자 하버드 대학 출판부 101년 역사상 가장 많이 팔린 베스트셀러, 토마 피케티의《21세기 자본론》은 출판 직후 전세계 경제학계와 출판계에 파란을 일으키고 있다.&lt;/p&gt;

&lt;p&gt;아직 한국어 번역판이 나오지 않았는데 서울대 이준구 교수님이 개인 홈페이지에 서평을 올리셨다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 사람은 좀 더 본질적인 차원에서 불평등이 왜 나쁘냐라는 의문을 제기할 수도 있을지 모른다. 예를 들어 맨큐(Greg Mankiw)는 “Defending the One Percent”라는 글에서 바로 이와 같은 의문을 제기하고 있다. 이 의문에 대해 피케티는 다음과 같은 설득력 있는 대답을 제시하고 있다. 우리가 살고 있는 민주사회는 분배상의 불평등이 혈연이나 지대가 아닌 능력 과 노력에 그 기초를 두고 있다는 믿음에 기초하고 있다. 그렇다면 사회적 불평등은 공정하며 모든 구성원에게 이득이 될 수 있는 한에서만 용인될 수 있는 것이다. 롤즈(John Rawls)의 ‘차등의 원칙’(difference principle)을 연상케 하는 이 말은 나에게 깊은 공감을 불러일으켰다.&lt;br/&gt;
  &lt;a href="http://www.huffingtonpost.kr/joonkoo-lee/story_b_5520810.html"&gt;http://www.huffingtonpost.kr/joonkoo-lee/story_b_5520810.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;책에 한 걸음 더 가깝게 다가가는데 큰 도움이 됐다.&lt;/p&gt;</description><link>http://likejazz.com/post/93097332015</link><guid>http://likejazz.com/post/93097332015</guid><pubDate>Mon, 28 Jul 2014 17:44:00 +0900</pubDate></item><item><title>코드 한 줄 없는 안드로이드 개발 이야기</title><description>&lt;p&gt;업무상 안드로이드 앱을 개발할 일이 생겨 진행 해봤다. 오래전부터 앱 하나쯤 만들어보려고 시도해봤으나 간단한 테스트외 딱히 동기부여가 안됐고 시간이 없다는 핑계로 번번히 지나가곤 했다. 그러는 사이 안드로이드는 꾸준히 버전업하여 이미 API level 20에 다다랐다.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://31.media.tumblr.com/80af5408aa9b6ce288937cde4e54247a/tumblr_inline_n98vm0WqsZ1qzgoac.jpg" alt=""/&gt;&lt;/p&gt;

&lt;p&gt;시간이 부족한건 마찬가지지만 최소한 구현해야할 스펙은 명확했고 이번에는 한 번 제대로 만들어보기로 했다.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;작년에 받아둔 Android Studio는 0.4 Alpha 버전이었는데 이제 Beta로 올라갔고 버전도 0.8이다. 당장 툴을 업그레이드 하는데서 부터 시작했다. 왜 Eclipse ADT가 아닌 Android Studio를 택했냐면 Eclipse의 느리고 무거움, 직관적이지 않음이 싫었고 Ant로 빌드환경을 구성하고 싶지 않았다. 게다가 &lt;a href="http://dev.likejazz.com/post/91299507871/intellij-gradle-lombok"&gt;Java 개발툴로도 IntelliJ를 사용&lt;/a&gt;하고 있기도 하다.&lt;/li&gt;
&lt;li&gt;Java니까 기존에 존재하는 Java의 풍부한 라이브러리를 그대로 활용할 수 있다. 끝내준다.&lt;/li&gt;
&lt;li&gt;프로젝트 생성시 다양한 앱 이벤트에 대해 skeleton 코드를 생성해주는건 흡사 MFC로 Win32 프로그램을 만들면 다양한 generated 코드를 보여주는 것 같다. 하지만 난이도는 Visual C++ 보다는 Visual Basic에 더 가깝다. 이는 쉽다고 비아냥 대는게 아니라 그만큼 쉽게 잘 설계됐다는 얘기이기도 하다. 물론 Java에 이미 익숙해서 일수도 있고 Visual Studio보다 Android Studio가 좀 더 편해서 그럴 수도 있다.&lt;/li&gt;
&lt;li&gt;Stackoverflow는 위대하다. 각종 troubleshooting을 이 곳에서 파악할 수 있었다. 예전 Visual C++ 개발할때 codeguru나 codeproject를 참고하곤 했는데 거긴 질의 응답이 아니라 일종의 ‘개발 문서 &amp;amp; 예제 코드&amp;#8217; 사이트다. 그러다보니 업데이트 주기도 늦고 문서도 풍부하지 않았다. 비슷한 주제의 문서에서 예제 코드를 추출해 한참동안 들여다보곤 했는데 이젠 정확히 일치하는 Stackoverflow 주제에서 정확하게 필요한 답변을 얻을 수 있으니 정말 편하다.&lt;/li&gt;
&lt;li&gt;개발 정보를 계속 찾다보니 Stackoverflow만 나왔다. 이후에는 아예 검색창을 Stackoverflow로 고정하고 검색하기 시작했다.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img src="https://31.media.tumblr.com/9946ca41b67a6055ce4ac2bc38f71ae5/tumblr_inline_n98vooKtOI1qzgoac.png" alt=""/&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;내 코드의 5할은 Stackoverflow가 채워줬고 3할은 github에서 차용했다. 내가 만든건 나머지 2할 뿐이다.&lt;/li&gt;
&lt;li&gt;intent-filter 속성 중 앱 실행에 관여하는 LAUNCHER와 deep link를 구성할 수 있는 BROWSABLE은 함께 명시할 수 없다. 그렇게하면 설치 후 ‘열기’ 버튼이 disabled 되고 launcher 아이콘이 보이지 않는다. intent-fileter를 두 번 만드는등 이를 피해갈 수 있는 work-around가 있지만 이렇게 하면 플레이스토어 등록은 당연히 거절될 것이다. 이 모든 경우는 Stackoverflow에 나와있으며 Activity를 2개 만들어 LAUNCHER와 BROWSABLE을 분리하는 것으로 해결했다.&lt;/li&gt;
&lt;li&gt;AVD는 너무 느려서 쓸만한 물건이 못된다. 하지만 디버깅을 위해 어쩔 수 없는 선택이기도 하다. &lt;a href="http://stackoverflow.com/questions/1554099/why-is-the-android-emulator-so-slow"&gt;CPU를 x86으로 설정하고 Host GPU를 사용하는 방법&lt;/a&gt;등이 그나마 도움이 된다.&lt;/li&gt;
&lt;li&gt;디버깅하는데 &lt;a href="http://developer.android.com/tools/help/adb.html"&gt;adb(Android Debug Bridge)&lt;/a&gt;가 큰 도움이 됐다. 그런데 adb에 의존하다보니 testcase를 만들지 않고 계속 debug 관점에서만 접근한 점이 아쉬움으로 남는다.&lt;/li&gt;
&lt;li&gt;최종 테스트를 위해선 결국 물리적인 기기에 연결해서 테스트가 필요한데 USB Debugging은 번거롭고 특히 PC가 아니라 맥과 연결하는건 잘 되지도 않았다. (LG 옵티머스 G) 그래서 간단한 Gradle 배포 task를 만들었고 아예 Dropbox로 배포해버렸다. 모바일에서 Dropbox에 접속해 apk를 설치했다. 일종의 원격 배포를 구현했고 매우 편했다.&lt;/li&gt;
&lt;li&gt;이 바닥도 개선 속도가 빠르다 보니 1년전 tutorial이 벌써 deprecated에 가깝다. 예를 들어 fragments가 어느새 activity의 필수 요소에 포함된 것등이고 최신 버전으로 생성해보면 PlaceholderFragment를 만들어 쓰는데 비교적 최신 tutorial을 봐야 이에 대한 예제가 나온다. 몇 년전에 사둔 안드로이드 개발 책은 전혀 도움이 되지 않았고(안드로이드의 개발 역사를 되짚어 보겠다면 모르겠으나) 그런면에서 갱신 속도가 빠른 Stackoverflow가 다시 한 번 도움이 됐다.&lt;/li&gt;
&lt;li&gt;마음 같아선 ‘Android L’로 최신 기능(예를 들어 Material Design)을 마음껏 쓰고 싶었지만 범용성을 무시할 수 없다보니 4.1 Jelly Bean 기준으로 개발했다. API level 16이고 발표일은 2012년 7월이다. 프로젝트 생성할때 보면 현재 77% 기기에 대응된다고 나온다.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://developer.android.com/guide/index.html"&gt;안드로이드도 API 가이드&lt;/a&gt;도 문서화가 잘 되어 있어 큰 도움이 됐다. Visual C++ 개발시 msdn이 도움이 되는 것과 비슷하다.&lt;/li&gt;
&lt;li&gt;안드로이드 앱도 Win32 프로그램 처럼 이벤트가 참 많다. 앱 개발시 각 이벤트 대응 설계를 제대로 하지 않으면 나중에 큰 재앙이 올 수 있겠다는 생각을 했다.&lt;/li&gt;
&lt;/ul&gt;</description><link>http://likejazz.com/post/92786243375</link><guid>http://likejazz.com/post/92786243375</guid><pubDate>Fri, 25 Jul 2014 11:16:00 +0900</pubDate></item><item><title>도메인을 연장했다.

2000년 7월, 선택이 15년을 이어갈줄은 몰랐다. 빠르게 기술이 발전하고 한 해, 한 해...</title><description>&lt;img src="http://40.media.tumblr.com/a79a40fc998adabee48592dbb87aca6e/tumblr_n955s6dncQ1qzjoe5o1_500.png"/&gt;&lt;br/&gt;&lt;br/&gt;&lt;p&gt;도메인을 연장했다.&lt;/p&gt;

&lt;p&gt;2000년 7월, 선택이 15년을 이어갈줄은 몰랐다. 빠르게 기술이 발전하고 한 해, 한 해 연장할까 고민하면서도 매 년 이어가게되는 어떤 매력 또는 사명감이 있다.&lt;/p&gt;

&lt;p&gt;이제는 아들에게 물려줄수도 있겠다는 생각을 잠시 해본다.&lt;/p&gt;</description><link>http://likejazz.com/post/92586607335</link><guid>http://likejazz.com/post/92586607335</guid><pubDate>Wed, 23 Jul 2014 10:36:00 +0900</pubDate></item><item><title>마크다운(Markdown) 이야기</title><description>&lt;p&gt;글쓰기를 많이 하다보니 raw text를 위한 공통의 플랫폼이 필요했다. 노트/블로그/위키/메일 모두 보이는 것의 차이일뿐 실제로 &amp;#8216;글&amp;#8217; text 은 동일하기 때문이다. 에버노트는 이런 가려운 부분을 긁어주는 놀라운 툴이었고 거의 6-7년째 써오고 있으나 결정적인 문제가 있다.&lt;/p&gt;

&lt;p&gt;출판 publish 하는 과정에서 거의 재작성 수준의 편집이 필요하다는 것인데, 블로그/위키/메일 모두 rich editor가 서로 다르게 동작해 매번 다시 스타일링을 해야하는 번거로움이 있다.&lt;/p&gt;

&lt;p&gt;게다가 에버노트 자체도 이기종간 스타일이 잘 유지되지 않는다. PC에서 작성한 글이 맥에서 다르게 보이고 심지어 안드로이드에서 편집하면 plain text로 변경되면서 스타일이 사라져 버리기도 한다. 한 회사에서 만든 똑같은 툴이지만 똑같지 않다. 보이는 것도 다르고 수정하면 또 달라진다.&lt;/p&gt;

&lt;p&gt;이 간극을 메꿔줄 공통된 포맷이 필요하다.&lt;/p&gt;

&lt;p&gt;바로, 마크다운 markdown 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Markdown is intended to be as easy-to-read and easy-to-write as is feasible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;markdown의 특징을 한마디로 요약하자면 &amp;#8216;인간적&amp;#8217; humane 이다. 읽기 쉽고 쓰기도 쉽게 하는데 방점이 찍혀있다. html markup은 문서를 꾸미기에는 좋지만 사람이 작성하기에 좋다고는 할 수 없다. 단어를 강조하기 위해 앞뒤로 &amp;lt;strong&amp;gt; 을 붙이고 링크를 달기 위해 &amp;lt;a href=&amp;#8230; 로 시작하는 태그를 기입하는건 너무 번거롭다. 게다가 최종 결과물은 항상 미리보기 preview 로 확인해야 눈에 들어온다.&lt;/p&gt;

&lt;p&gt;markdown은 인간적이지 않은 html markup을 좀 더 &amp;#8216;인간적&amp;#8217;으로 표현해내는 표현식이다. 작성하기 쉽고 문서의 결과물도 쉽게 예측 가능하다. rich editor 특유의 불편함 때문에 항상 html markup으로 일일이 문서를 작성해오던 사람에게 markdown은 축복이다.&lt;/p&gt;

&lt;p&gt;markdown은 글을 쓰는 모든 곳에 활용될 수 있다. 개인적인 노트에서 부터 블로그, 위키, 메일까지. 요즘 잘 나가는 앱/서비스는 모두 markdown을 잘 지원한다. 이제 더 이상 markdown이 아닌 형식으로는 글을 적지 않는다.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;노트: Day One&lt;/li&gt;
&lt;li&gt;블로그: Tumblr&lt;/li&gt;
&lt;li&gt;메일: Airmail&lt;/li&gt;
&lt;li&gt;코드: github&lt;/li&gt;
&lt;li&gt;에디터: &lt;a href="http://mouapp.com/"&gt;Mou&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;노트는 Day One을 사용한다. 에버노트의 팬이었으나 WYSIWYG이라는 태생적인 한계탓에 markdown을 지원하는 일은 요원해보인다. Day One은 edit/view 모드가 분리되어 edit 모드에서 markdown을 확실히 지원하면서도 간결하다. 원래 일기장 용도지만 에버노트를 대체하는 note-taking 앱으로 아무런 불편함이 없다. 오히려 훨씬 더 편하다.&lt;/p&gt;

&lt;p&gt;블로그는 Tumblr다. Day One에서 작성한 markdown 형태의 초안을 그대로 붙이기만 하면 별다른 작업 없이도 훌륭하게 블로그에 맞게 스타일링된다.&lt;/p&gt;

&lt;p&gt;markdown은 README 문서등 개발 생태계에서 주로 쓰였고 github, stackoverflow등 개발 사이트에 채택되면서 점점 더 인기를 얻고 있다. 게다가 Tumblr, Wordpress등 잘 나가는 블로그 플랫폼들이 적극 채택하면서 대중화되고 있다. 사실 이렇게 좋은 포맷은 개발자 뿐만 아니라 기자, 작가등 글을 전문적으로 쓰는 사람에게까지 확대되어야 한다. 뿐만 아니라 모든 CMS등에도 적용되어 기자나 편집자들이 더 이상 문서 편집시 rich editor의 엉뚱한 스타일링에 고생할 필요 없이 markdown으로 편집의 자유를 누려야 한다.&lt;/p&gt;

&lt;p&gt;글을 쓰는 모든 사람에게 마크다운(markdown)은 필수다.&lt;/p&gt;</description><link>http://likejazz.com/post/91688598730</link><guid>http://likejazz.com/post/91688598730</guid><pubDate>Mon, 14 Jul 2014 08:43:00 +0900</pubDate></item><item><title>Fink → MacPorts → Homebrew
처음에는 바이너리만 관리하는 Fink를 사용했으나 애초에 컴파일을 해야하는 한계로 인해 버전업 대응이 너무 느렸고 그래서 소스를...</title><description>&lt;p&gt;Fink &lt;span&gt;→ MacPorts &lt;span&gt;→ Homebrew&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;처음에는 바이너리만 관리하는 Fink를 사용했으나 애초에 컴파일을 해야하는 한계로 인해 버전업 대응이 너무 느렸고 그래서 소스를 직접 빌드하는, 팩키지가 다양하고 버전업이 빠른 MacPorts를 사용할 수 밖에 없었다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;하지만 이미 OS/X에 존재하는 시스템 라이브러리를 사용하지 않고 매번 새로 설치하는, 뭐 하나 설치하려면 항상 해당 라이브러리들의 최신 버전을 내려 받아 아예 독립적인 빌드 환경을 구성하는 특징은 생각보다 번거롭다. port install wget 해보면 wget 하나 설치하기 위해 얼마나 다양한(!) 라이브러리를 설치하는지 확인할 수 있다. 실제로 보면 경악할 정도.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Homebrew는 맥 다운 간결함이 매력이다. Formula라는 팩키지 정의서에 따라 시스템에 설치된 라이브러리를 활용해 설치를 진행한다. Formula 내용을 보면 콘솔에서 ./configure, make, make install 하는 것과 크게 다를바 없다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;또한 모든 빌드된 결과물은 /usr/local/Cellar에 버전별로 독립적으로 위치해 버전 관리도 용이하고 만약 uninstall 하겠다면 해당 팩키지 디렉토리를 삭제하기만 하면된다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;V8(JavaScript Engine) 같은 경우 직접 설치하려면 다소 까다로운 편인데 오늘 brew로 단 한 번의 명령으로 문제없이 설치했다. V8의 Formula는 brew edit v8으로 확인할 수 있다.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</description><link>http://likejazz.com/post/91444842925</link><guid>http://likejazz.com/post/91444842925</guid><pubDate>Fri, 11 Jul 2014 19:58:00 +0900</pubDate></item><item><title>LLVM 만들던 Chris Lattner는 2005년 부터 애플에서 Xcode, Intruments, 컴파일러 도구의 개발을 리딩해왔는데 Swift의 등장으로 요즘 업계에 가장...</title><description>&lt;p&gt;LLVM 만들던 &lt;a href="http://en.wikipedia.org/wiki/Chris_Lattner"&gt;Chris Lattner&lt;/a&gt;는 2005년 부터 애플에서 Xcode, Intruments, 컴파일러 도구의 개발을 리딩해왔는데 Swift의 등장으로 요즘 업계에 가장 핫한 개발자가 됐다.&lt;/p&gt;
&lt;p&gt;아직 어린 나이지만(78년생) 2010년에 이미 LLVM으로 ACM Software System Award를 수상한 바 있고 2010년 7월에 시작한 Swift는 꾸준한 개발 끝에 2014년 6월 WWDC를 통해 4년만에 빛을 보게되면서, 앞으로의 미래가 무척 기대된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/3d38636b6997140e981e9b820784d4d4/tumblr_inline_n883r1ipBK1qzgoac.png"/&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“fast, modern, and designed for safety.” It’s like “Objective-C, without the C,”  - Craig Federighi, Apple Software Engineering VP&lt;/p&gt;
&lt;p&gt;&lt;a href="http://venturebeat.com/2014/06/02/apple-introduces-a-new-programming-language-swift-objective-c-without-the-c/"&gt;http://venturebeat.com/2014/06/02/apple-introduces-a-new-programming-language-swift-objective-c-without-the-c/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><link>http://likejazz.com/post/90823994955</link><guid>http://likejazz.com/post/90823994955</guid><pubDate>Sat, 05 Jul 2014 14:13:00 +0900</pubDate></item><item><title>문자열 검색 개발</title><description>&lt;p&gt;그러니까 &lt;a href="http://likejazz.com/post/89646405805"&gt;검색엔진을 만든&lt;/a&gt; 직후였다.&lt;/p&gt;
&lt;p&gt;한참동안 검색 기능을 테스트 하다가 우연히 데이타 파일을 직접 grep 해봤는데, 이럴수가. 내가 만든 엔진보다 grep이 더 빨랐다. 물론 grep은 단순히 검색된 문자열을 순서대로 나열하는 것이고 엔진은 가중치가 높은 순으로 랭킹을 거친다는 차이가 있지만 그래도 엔진이 문자열 검색보다 더 느리다는건 굴욕이다.&lt;/p&gt;
&lt;p&gt;GNU grep을 만든 Mike Haertel이 &lt;a href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html"&gt;why GNU grep is fast&lt;/a&gt;에서 밝힌 바에 따르면 GNU grep은 보이어-무어(Boyer-Moore) 알고리즘을 사용한다. 물론 이외에도 여러가지 hacks를 적용해 성능을 극대화했지만, 우선 그 근간이 되는 보이어-무어 알고리즘부터 구현해보기로 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm"&gt;보이어-무어(Boyer-Moore) 알고리즘&lt;/a&gt;은 크게 세 가지 rule로 구성된다.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;right to left scan&lt;/li&gt;
&lt;li&gt;bad character rule&lt;/li&gt;
&lt;li&gt;good suffix rule&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/42306da7fc5626c1afdd273ca8dc5647/tumblr_inline_n7z7xlN6L51qzgoac.png"/&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt; &lt;a href="http://java.dzone.com/articles/algorithm-week-boyer-moore"&gt;right to left scan&lt;/a&gt; &amp;gt;&lt;/p&gt;
&lt;p&gt;후미에서부터 역순으로 문자열 비교를 수행하고 mismatch가 발생할때 bad charater rule 또는 good suffix rule 중 max 값에 대한 shift를 수행한다. rule은 단순하지만 막상 암산으로 계산하려면 쉽지 않다. 그래서 연습장에 적어나가며 알고리즘을 계산했다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/2003356869d9d8e53f07525cc42d3616/tumblr_inline_n7z77oZld31qzgoac.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;사실 알고리즘이 전부인 코드라 이번에는 코딩보다는 알고리즘을 이해하는데 대부분의 시간을 할애했다. 워낙에 유명한 알고리즘이다 보니 예제 코드도 포럼, github 뿐만 아니라 gist에 까지 여러가지가 있는데 대부분은 C&amp;amp;P 한 것에 불과하고(함수명이 모두 동일) 그 중 일부는 잘못된 코드도 있었다.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;논문 PDF: &lt;a href="http://www.akira.ruc.dk/~keld/teaching/algoritmedesign_f05/Artikler/09/Boyer77.pdf"&gt;A Fast String Searching Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;그나마 위키피디어에 있는 샘플이 논문에 가장 가까웠고, 실제로 위키피디어 C 코드는 변수명을 string, stringlen, pat, patlen 그리고 rule 테이블을 delta1, delta2로 명시하는등 논문과 명칭이 동일하고 논문에 명시된 알고리즘과 동일한 순서대로 작성되어 있다.&lt;/p&gt;
&lt;p&gt;원래 논문은 PDP-10 어셈블리로 구현되었으며(그럴 수 밖에 없는게 1977년에 쓰여진 논문) 위키피디어에 C로 작성한 코드외에 python과 java 버전은 엉뚱하게도 논문과 다른 순서로 작성되어 있다. 애당초 이번에는 성능에 포커싱해 C 구현외에 다른 언어는 생각 해보지도 않기도 해서 망설임없이 C 코드를 fork해서 구현했다.&lt;/p&gt;
&lt;p&gt;그렇게 해서 이번에도 github에 결과물을 등록했다.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href="https://github.com/likejazz/boyer-moore-string-search"&gt;https://github.com/likejazz/boyer-moore-string-search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/cd17538fecd89306a93bf0b295708f73/tumblr_inline_n7z82875Wy1qzgoac.png"/&gt;&lt;/p&gt;
&lt;p&gt;애당초 고성능이 가장 큰 목표이기에 shift 횟수와, match 판단을 위해 몇 개의 문자열(chars)을 비교했는지(compared)를 디버그로 출력하도록 했다. #define DEBUG를 하면 디버그가 출력되며 기본적으로 define한 상태로 커밋했다.&lt;/p&gt;
&lt;p&gt;chars compared 값이 적을수록 더 최적화된 연산을 수행했다고 보면 된다. 물론 여기에는 원래 계산해야 하는 preprocessing 즉, delta table 계산 시간은 빠져있다. 각 예문별 연산 확인시 참고하기 바란다.&lt;/p&gt;
&lt;p&gt;이번에도 주말을 활용했는데 마침 바닷가로 캠핑을 가기로 한 날이라 노트북을 들고갈지 한참 고민을 했다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/d5f16684ca98441fea4b105e4d55646b/tumblr_inline_n7z8fgUBuS1qzgoac.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;결국 갖고 갔고 바닷가에선 열심히 수영하고 놀아주고 애들 잘때 밤에, 낮에 애들 놀때 틈틈히 코딩했는데 다행히 만족스런 결과물을 얻을 수 있었다.&lt;/p&gt;
&lt;p&gt;사실 문자열 검색 같은 부분은 이미 좋은 라이브러리가 많이 나와있기 때문에 실제로 구현할 일은 거의 없다. 이번이 마지막이 될지도 모르는데, 덕분에 깊이 있게 짚어보고 넘어 갈 수 있는 좋은 기회였다.&lt;/p&gt;</description><link>http://likejazz.com/post/90399631505</link><guid>http://likejazz.com/post/90399631505</guid><pubDate>Tue, 01 Jul 2014 08:39:41 +0900</pubDate></item><item><title>한국에는 가짜 CTO가 많다</title><description>&lt;a href="http://www.zdnet.co.kr/column/column_view.asp?artice_id=20140630075815"&gt;한국에는 가짜 CTO가 많다&lt;/a&gt;: &lt;blockquote&gt;
&lt;p&gt;&lt;span&gt;회사에 CTO가 있어도 하는 일은 CTO가 아닌 경우가 많다. 즉, 가짜 CTO인 경우다. 명함을 받아보면 CTO라고 되어 있는데 하는 일을 보면 CTO가 아니고 연구소장 등 관리자의 역할을 하는 경우다. 주로 하는 일은 전체 개발 조직을 관리하고 여러 프로젝트의 진행을 챙기는 등의 관리 일을 많이 한다. 또 경영자에게 보고를 하기 위한 보고서를 만드는데 시간을 쓰기도 한다.&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description><link>http://likejazz.com/post/90316791020</link><guid>http://likejazz.com/post/90316791020</guid><pubDate>Mon, 30 Jun 2014 12:29:00 +0900</pubDate></item><item><title>일 못하는 직장인의 특징 11가지</title><description>&lt;a href="http://www.huffingtonpost.kr/2014/06/20/story_n_5514039.html"&gt;일 못하는 직장인의 특징 11가지&lt;/a&gt;: &lt;blockquote&gt;
&lt;p&gt;2. 출근하자마자 이메일을 확인한다.&lt;/p&gt;
&lt;p&gt;경영전문가 줄리 모겐스턴은 출근하자마자 이메일을 보는 것은 비효율적이라고 말한다. 수십 개의 이메일을 보며 아침 시간을 보내면 스트레스가 쌓이기 마련이다. 그녀는 허핑턴포스트와의 인터뷰에서 이렇게 말했다. “이메일을 보면 쓸데없는 부탁, 예상치 않았던 일, 기억해야 하는 일, 이 외에 챙겨야 할 일들이 계속 생긴다. 그러니 아침 한두 시간 동안은 가장 중요한 업무를 먼저 처리하고 이후 이메일 업무를 하라. 아침에 오자마자 해결해야 할 급한 용건은 이메일이 아닌 전화로 요청했을 것이다.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;틀렸다.&lt;/p&gt;
&lt;p&gt;이메일은 즉시 답변해야 한다. 그렇지 않다면 사람들은 더 이상 메일을 보내지 않게 될 것이며, 조금만 급한 일이 생겨도 매 번 전화를 하게 될 것이다. 수시로 울려대는 업무 요청 전화가 즐겁다면 계속 메일을 무시하던가.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;참고: &lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;a href="http://likejazz.com/post/89004910180"&gt;일 잘 하는 첫 번째 방법: 빠른 피드백&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><link>http://likejazz.com/post/89809199428</link><guid>http://likejazz.com/post/89809199428</guid><pubDate>Wed, 25 Jun 2014 09:30:00 +0900</pubDate></item><item><title>검색엔진 개발기</title><description>&lt;p&gt;검색엔진을 만들었다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://likejazz.com/post/89251737545"&gt;IIR 번역서를 보면서&lt;/a&gt; 이론을 직접 구현해봐야겠다는 생각에 주말에 짬을 내어 코딩을 시작했다. 마침 비가 내려 밖으로 운동 하러 나갈 수도 없었고 이쁜 꼬맹이 친구가 집에 놀러와 다소 여유도 생겼다.&lt;/p&gt;
&lt;p&gt;C++로 write from scratch를 생각했으나 그러기엔 시련이 너무 많았다. 결정적으로 주말에 끝내기엔 너무 방대했다. 결국 오픈소스를 fork 하기로 마음 먹었고 &lt;a href="https://github.com/gigablast/open-source-search-engine"&gt;gigablast&lt;/a&gt;를 고민했으나 마찬가지로 오히려 새로 짜는게 빠르겠다 싶을 정도로 복잡했다. 애당초 enterprise level 검색엔진이라 IIR을 구현해보는 용도로는 지나치게 방대했다.&lt;/p&gt;
&lt;p&gt;그러던 중 &lt;a href="https://github.com/trein/simple-search-engine"&gt;Simple Search Engine&lt;/a&gt;이라는 프로젝트가 눈에 띄었다. python이라 빠른 프로토타이핑이 가능할 것 같았고 일단 IIR 구현에 중점을 두고 추후에 C++로 컨버팅하면서 구조와 성능을 개선하는 편이 낫겠다는 생각이 들었다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/202fe6f384d028f5c1cc775e3ea3309d/tumblr_inline_n7m95eaXfI1qzgoac.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;fork 후 전체 구조를 그림을 그리면서 파악해나갔고 기능별로 구조를 떼내면서 리팩토링을 시작했다. 애당초 색인기와 검색기가 통합된 형태였는데 이를 색인기, 검색기, 원문 저장소로 떼어내고 랭킹도 따로 떼어냈다.&lt;/p&gt;
&lt;p&gt;사실 python에는 dictionary라는 훌륭한 자료형이 있어서 색인 구조에 별다른 고민을 할 필요가 없었다. posting list의 skip pointers를 직접 구현하고 싶었는데 high level 언어를 쓰다보니 그러지 못한 점은 다소 아쉽다.&lt;/p&gt;
&lt;p&gt;색인기 뿐만 아니라 쿼리의 불용어(stop words) 처리를 추가했고 색인 데이타를 serialize 해서 파일로 저장하는 구조로 바꿨다. 원본이 10만개의 튜플을 지닌 11.1&amp;#160;MB인데 색인은 1.2배 크고 따로 설명하겠지만 랭킹은 무려 7.5배나 더 큰, 최적화는 엉망이지만 나름대로 검색엔진 구조 자체는 만족스런 형태로 개선할 수 있었다.&lt;/p&gt;
&lt;p&gt;랭킹쪽은 이미 tf-idf 구현이 잘 되어 있어 특별히 수정할 부분은 없었다. 색인 시점에 미리 점수를 계산해서 검색 속도를 높였고 tf는 원문 저장소에, idf는 vacabulary 리스트에 산출한 다음 각 docs * terms간 matrix를 만들어 여기에 점수를 저장했다. 점수를 normalize 하고 중복 entries를 합산(summed together)하는 약식의 압축과정을 거치지만 그래도 원본에 비해 랭킹 파일이 무려 7.5배나 더 큰 부분은 아직 개선할 여지가 많다.&lt;/p&gt;
&lt;p&gt;샘플 데이타로 크로스핏 선수들의 트윗을 활용했고 원본 데이타는 크로스핏, NBA, NFL, UFC, 동계 올림픽을 포함한 유명 운동선수(ahletes)들의 트윗 100,000건을 트위터 API를 통해 취합한 다음 이를 활용했다. 색인 후 쿼리를 날려보니 0.1초 이내로 결과가 잘 나온다. 그렇게 해서 아래 결과물이 나왔다.&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;span&gt;&lt;a href="https://github.com/likejazz/simple-search-engine"&gt;https://github.com/likejazz/simple-search-engine&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;img alt="image" src="https://31.media.tumblr.com/a3a131c37799185bd5a6cd1d4509679c/tumblr_inline_n7nje9JNFH1qzgoac.png"/&gt;&lt;/p&gt;

&lt;p&gt;상세한 내용은 README에 친절히 적어두었고 쉽게 실행할 수 있으니 다들 한 번씩 읽어보고 테스트 해보면 좋겠다. 아울러 신선하고 재밌는 경험이었다. 주말에 잘 끝맺음을 해서 일정관리도 성공적이었고 github의 편리함도 다시 한 번 확인할 수 있었다. 아래와 같은 교훈 &amp;amp; 계획을 정리하면서 마무리 한다.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;모든 문서는 영어로&lt;br/&gt;원어민이 아닌 이상 영어는 누구나 힘들다. 하지만 좋은 software가 언어 문제로 사장되는건 안타까운 일이다. 글로벌을 받아들이고 글로벌하게 나가기 위해선 모든 코드와 주석, 문서를 영어로 적는건 당연하다.&lt;/li&gt;
&lt;li&gt;C++로 컨버팅&lt;br/&gt;용량과 성능 문제를 개선하기 위해 C++로 컨버팅한다. python은 최고의 프로토타이핑 도구이지만 IIR을 제대로 구현하고 성능 최적화를 위해 C++ 컨버팅이 필수적이다.&lt;/li&gt;
&lt;li&gt;github는 훌륭하다&lt;br/&gt;읽기만 하는 것과 직접 써보는 것은 또 다른 문제다. 여러번 읽어오면서 느끼지 못했던 부분들을 직접 써보면서 commit하고 push 하면서 얼마나 편리하고 얼마나 훌륭한지 다시 한 번 체감할 수 있었다. 몰랐던 새로운 기능들도 많이 알게 됐다.&lt;/li&gt;
&lt;/ol&gt;</description><link>http://likejazz.com/post/89646405805</link><guid>http://likejazz.com/post/89646405805</guid><pubDate>Mon, 23 Jun 2014 20:04:00 +0900</pubDate></item></channel></rss>
